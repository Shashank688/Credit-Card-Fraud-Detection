# -*- coding: utf-8 -*-
"""CODSOFT_task_5_Credit_Card_Fraud_Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/shahjan49/CODSOFT/blob/main/CODSOFT_task_5_Credit_Card_Fraud_Detection.ipynb

Loading Necessary Libraries.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as snr
from sklearn.preprocessing import OneHotEncoder

"""Load data and show first 10 rows of data."""

data=pd.read_csv("/content/creditcard.csv")
data.head(10)

"""Calculate statistical values and round them up to 3 decimal places."""

data.describe().round(3)

"""Checking for null values and return their sum of numbers of true values
in each column.
"""

data.isnull().sum()

"""Extracting all information about data."""

data.info()

"""Checking the shape of data."""

data.shape

"""Splitting the data into Independent and dependent set."""

x=data.drop(['Class'],axis=1)
x.head()

y=data['Class']
y.head()

"""Devide the cleaned data into training and testing testing sets."""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,train_size=0.8)

"""Import first Machine Learning Model 'K-Nearest Neighbor'."""

from sklearn.neighbors import KNeighborsClassifier
neighbor=KNeighborsClassifier(n_neighbors=5)

"""Train the model"""

neighbor.fit(x_train,y_train)

"""Make predictions on model."""

predictions=neighbor.predict(x_test)
print(predictions)

"""Check confusion metrics and check accuracy score."""

from sklearn.metrics import confusion_matrix, accuracy_score
cm=confusion_matrix(y_test, predictions)
ac=accuracy_score(y_test, predictions)
print(cm)

print(ac)

"""Creating second machine learning model 'Logistic Regression'."""

from sklearn.linear_model import LogisticRegression
log=LogisticRegression()

"""Train the model."""

log.fit(x_train, y_train)

"""Make Predictions on model."""

log_predictions=log.predict(x_test)
print(log_predictions)

"""Check confusion metrics and accuracy score."""

from sklearn.metrics import confusion_matrix, accuracy_score
cm=confusion_matrix(y_test, log_predictions)
ac=accuracy_score(y_test, log_predictions)
print(cm)

print(ac)

"""Creating third machine learning model 'Decision Tree'."""

from sklearn.tree import DecisionTreeClassifier
tree=DecisionTreeClassifier()

"""Train the model."""

tree.fit(x_train, y_train)

"""Make predictions on model."""

tree_predictions=tree.predict(x_test)
print(tree_predictions)

"""Check confusion metrics and accuracy score."""

from sklearn.metrics import confusion_matrix, accuracy_score
cm=confusion_matrix(y_test, tree_predictions)
ac=accuracy_score(y_test, tree_predictions)
print(cm)

print(ac)

plt.figure(figsize=(8,6))
snr.histplot(data=data, x='Time', y='Amount', bins=50)
plt.title("Histogram of Time vs Amount")
plt.xlabel("Time(Sec)")
plt.ylabel("Amount($)")
plt.show()

fig = plt.figure(figsize=(8,6))
snr.countplot(x='Class',data=data)
plt.xlabel('Fraud Class')
plt.ylabel("Count")
plt.title("Fraud Classification Count")
plt.show()

data.hist(figsize=(25,20))
plt.show()

